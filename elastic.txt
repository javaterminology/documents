https://www.elastic.co/guide/en/x-pack/current/securing-aliases.html
pom dependencies for elastic search:
<!-- elastic search dependencies -->
		<dependency>
			<groupId>org.elasticsearch</groupId>
			<artifactId>elasticsearch</artifactId>
			<version>5.0.0</version>
		</dependency>

		<dependency>
			<groupId>org.elasticsearch.client</groupId>
			<artifactId>transport</artifactId>
			<version>5.0.0</version>
		</dependency>

		<dependency>
			<groupId>org.elasticsearch.plugin</groupId>
			<artifactId>shield</artifactId>
			<version>2.2.0</version>
		</dependency>
//load json from properties folder and convert to String
 String mappingJson = new String(ByteStreams.toByteArray(this.getClass().getClassLoader().getResourceAsStream("product_mapping.json")));
		
  
>>cluster – An Elasticsearch cluster consists of one or more nodes and is identifiable by its cluster name.

>>node – A single Elasticsearch instance. In most environments, each node runs on a separate box or virtual machine.

>>index – In Elasticsearch, an index is a collection of documents.

>>shard – Because Elasticsearch is a distributed search engine, an index is usually split into elements known as shards that are distributed across multiple nodes. 
Elasticsearch automatically manages the arrangement of these shards. It also rebalances the shards as necessary, so users need not worry about the details.

replica – By default, Elasticsearch creates five primary shards and one replica for each index. 
This means that each index will consist of five primary shards, and each shard will have one copy.

>> create INDEX books

PUT localhost:9200/books?&pretty 
curl -XPUT 'localhost:9200/books?&pretty'

GET localhost:9200/books/_mapping?&pretty - 2 c mappings for index
CURL -XGET 'localhost:9200/books/_mapping?&pretty'
 
curl -XPOST 'localhost:9200/books/fiction/1?&pretty' -d @books.json -H 'Content-Type: application/json'
localhost:9200/books/fiction/1?&pretty

books.json:
{
"name":"Java",
"author":"Rajasekhar",
"cost":"200.50",
"Available":"true",
"publishers":"Graham Hills",
"date":"2018-05-07"
}
>> after adding document to index run below command
>> CURL -XGET 'localhost:9200/books/_mapping?&pretty' - 2 c mappings of an index
{
    "books": {
        "mappings": {
            "fiction": {
                "properties": {
                    "Available": {
                        "type": "text", --> means u can perform full text search on this field
                        "fields": {
                            "keyword": { --> keyword mapping - we can perform keyword search - usually used for sorting,filtering and aggregations
                                "type": "keyword", -->ex:get me count of books that are available,that is a one keyword aggregation.
                                "ignore_above": 256 -->keyword fields will allow only 256 characters
                            }
                        }
                    },
                    "author": {
                        "type": "text",
                        "fields": {
                            "keyword": {
                                "type": "keyword",
                                "ignore_above": 256
                            }
                        }
                    },
                    "cost": {
                        "type": "text",
                        "fields": {
                            "keyword": {
                                "type": "keyword",
                                "ignore_above": 256
                            }
                        }
                    },
                    "date": {
                        "type": "date"
                    },
                    "name": {
                        "type": "text",
                        "fields": {
                            "keyword": {
                                "type": "keyword",
                                "ignore_above": 256
                            }
                        }
                    },
                    "publishers": {
                        "type": "text",
                        "fields": {
                            "keyword": {
                                "type": "keyword",
                                "ignore_above": 256
                            }
                        }
                    }
                }
            }
        }
    }
}

>> mappings can be set only when the index is created,they can not be edited after that..

>>only updates that you can make to mappings is to add new fields.

books2.json:

{
 "properties":{
 "pages":{
 "type":"integer"
 }
}
}
>> adding new field 'pages' to our mapping
curl -XPUT 'localhost:9200/books/_mapping/fiction?pretty' -d @books2.json -H 'Content-Type : application/json'
localhost:9200/books/_mapping/fiction?pretty
output:
acknowledged=true - means added new field successfully to books schema.

now see mapping again for an index whether pages field added or not:

localhost:9200/books/_mapping?&pretty

{
  "books" : {
    "mappings" : {
      "fiction" : {
        "properties" : {
          "Available" : {
            "type" : "text",
            "fields" : {
              "keyword" : {
                "type" : "keyword",
                "ignore_above" : 256
              }
            }
          },
          "author" : {
            "type" : "text",
            "fields" : {
              "keyword" : {
                "type" : "keyword",
                "ignore_above" : 256
              }
            }
          },
          "cost" : {
            "type" : "text",
            "fields" : {
              "keyword" : {
                "type" : "keyword",
                "ignore_above" : 256
              }
            }
          },
          "date" : {
            "type" : "date"
          },
          "name" : {
            "type" : "text",
            "fields" : {
              "keyword" : {
                "type" : "keyword",
                "ignore_above" : 256
              }
            }
          },
          "pages" : {
            "type" : "integer"
          },
          "publishers" : {
            "type" : "text",
            "fields" : {
              "keyword" : {
                "type" : "keyword",
                "ignore_above" : 256
              }
            }
          }
        }
      }
    }
  }
}
delete index:
curl -XDELETE 'localhost:9200/books?pretty'
localhost:9200/books?pretty
{
  "acknowledged" : true
}

finally deleted books index.

